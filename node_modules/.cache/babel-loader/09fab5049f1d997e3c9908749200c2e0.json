{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _reactDualRangeSlider = require(\"../../src/styles/react-dual-range-slider.css\");\n\nvar _reactDualRangeSlider2 = _interopRequireDefault(_reactDualRangeSlider);\n\nvar _defaultMessages = require(\"../lang/default-messages\");\n\nvar _defaultMessages2 = _interopRequireDefault(_defaultMessages);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _ref = _react2.default.createElement(\"div\", null);\n\nvar _ref2 = _react2.default.createElement(\"div\", null);\n\nvar ReactDualRangeSlider = function (_React$Component) {\n  (0, _inherits3.default)(ReactDualRangeSlider, _React$Component);\n\n  function ReactDualRangeSlider(props) {\n    (0, _classCallCheck3.default)(this, ReactDualRangeSlider);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call(this, props));\n\n    _this.state = _this.getStateFromProps(props);\n    return _this;\n  }\n\n  ReactDualRangeSlider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    this.setState(this.getStateFromProps(nextProps));\n  };\n\n  ReactDualRangeSlider.prototype.getStateFromProps = function getStateFromProps(props) {\n    var limits = props.limits.slice().sort(this.sortValues);\n    var values = props.values.slice().sort(this.sortValues);\n    var size = Math.abs(limits[1] - limits[0]);\n    values[0] = values[0] < limits[0] ? limits[0] : values[0] > limits[1] ? limits[1] : values[0];\n    values[1] = values[1] > limits[1] ? limits[1] : values[1] < limits[0] ? limits[0] : values[1];\n    return {\n      limits: limits,\n      size: size,\n      values: values,\n      lock: props.lock,\n      reverse: props.reverse,\n      isSelDown: false,\n      indexSelDown: 0,\n      moveStartValue: 0,\n      moveCurrentValue: 0,\n      moveStartX: 0,\n      moveCurrentX: 0,\n      boxWidth: 0,\n      formatFunc: props.formatFunc,\n      onChange: props.onChange,\n      rangeColor: props.rangeColor\n    };\n  };\n  /**\n   * startToMove\n   * event triggered when the user starts to move\n   */\n\n\n  ReactDualRangeSlider.prototype.startToMove = function startToMove(event, index) {\n    var clientX = event.touches && event.touches.length > 0 ? event.touches[0].clientX : event.clientX;\n    this.setState({\n      isSelDown: true,\n      indexSelDown: index,\n      moveStartValue: this.state.values[index],\n      moveCurrentValue: this.state.values[index],\n      moveStartX: clientX,\n      moveCurrentX: clientX,\n      boxWidth: event.currentTarget.parentElement.offsetWidth\n    });\n    event.stopPropagation();\n  };\n  /**\n   * onMouseDown1\n   * event triggered when the user mouse is down on slider 0\n   */\n\n\n  ReactDualRangeSlider.prototype.onMouseDown0 = function onMouseDown0(event) {\n    this.startToMove(event, 0);\n  };\n  /**\n   * onMouseDown1\n   * event triggered when the user mouse is down on slider 1\n   */\n\n\n  ReactDualRangeSlider.prototype.onMouseDown1 = function onMouseDown1(event) {\n    this.startToMove(event, 1);\n  };\n\n  ReactDualRangeSlider.prototype.onTouchStart0 = function onTouchStart0(event) {\n    this.startToMove(event, 0);\n  };\n\n  ReactDualRangeSlider.prototype.onTouchStart1 = function onTouchStart1(event) {\n    this.startToMove(event, 1);\n  };\n\n  ReactDualRangeSlider.prototype.onTouchMove = function onTouchMove(event) {\n    this.move(event);\n  };\n\n  ReactDualRangeSlider.prototype.onTouchEnd = function onTouchEnd(event) {\n    this.stopToMove(event);\n  };\n  /**\n   * onMouseMove\n   * event triggered when the user moves his mouse\n   */\n\n\n  ReactDualRangeSlider.prototype.onMouseMove = function onMouseMove(event) {\n    this.move(event);\n  };\n\n  ReactDualRangeSlider.prototype.move = function move(event) {\n    if (this.state.isSelDown) {\n      var clientX = event.touches && event.touches.length > 0 ? event.touches[0].clientX : event.clientX;\n      this.setState({\n        moveCurrentX: clientX,\n        moveCurrentValue: this.getMoveCurrentValue(clientX)\n      });\n    }\n  };\n  /**\n   * getMoveCurrentValue\n   * return the moving current value\n   */\n\n\n  ReactDualRangeSlider.prototype.getMoveCurrentValue = function getMoveCurrentValue(moveCurrentX) {\n    var moveBoxProportion = (moveCurrentX - this.state.moveStartX) / this.state.boxWidth;\n\n    if (this.state.reverse) {\n      moveBoxProportion = moveBoxProportion * -1;\n    }\n\n    var moveIntoLimit = this.state.size * moveBoxProportion;\n    var moveCurrentValue = this.state.moveStartValue + moveIntoLimit;\n    moveCurrentValue = moveCurrentValue < this.state.limits[0] ? this.state.limits[0] : moveCurrentValue;\n    moveCurrentValue = moveCurrentValue > this.state.limits[1] ? this.state.limits[1] : moveCurrentValue;\n    return moveCurrentValue;\n  };\n  /**\n   * formatOutput\n   * return values well formated \n   */\n\n\n  ReactDualRangeSlider.prototype.formatOutput = function formatOutput() {\n    var values = this.getValues();\n    return [this.state.formatFunc(values[0]), this.state.formatFunc(values[1])];\n  };\n  /**\n   * stopToMove\n   * event triggered when the user stop to move\n   */\n\n\n  ReactDualRangeSlider.prototype.stopToMove = function stopToMove(event) {\n    if (this.state.isSelDown) {\n      var values = this.getValues();\n      this.setState({\n        values: values,\n        isSelDown: false\n      });\n      this.onChange();\n    }\n\n    event.stopPropagation();\n  };\n  /**\n   * onMouseLeave\n   * event triggered when the user leave the area with the mouse\n   */\n\n\n  ReactDualRangeSlider.prototype.onMouseLeave = function onMouseLeave(event) {\n    this.stopToMove(event);\n  };\n  /**\n   * onMouseUp\n   * event triggered the user stop to drag a slider with the mouse\n   */\n\n\n  ReactDualRangeSlider.prototype.onMouseUp = function onMouseUp(event) {\n    this.stopToMove(event);\n  };\n  /**\n   * getLimits\n   * return limits\n   */\n\n\n  ReactDualRangeSlider.prototype.getLimits = function getLimits() {\n    return this.state.limits.slice();\n  };\n  /**\n   * getDisplayLimits\n   * return limits well formated\n   */\n\n\n  ReactDualRangeSlider.prototype.getDisplayLimits = function getDisplayLimits() {\n    var limits = this.getLimits();\n\n    if (this.state.reverse) {\n      limits.reverse();\n    }\n\n    return [this.state.formatFunc(limits[0]), this.state.formatFunc(limits[1])];\n  };\n  /**\n   * getValues\n   * return current values, including when sliding\n   */\n\n\n  ReactDualRangeSlider.prototype.getValues = function getValues() {\n    var values = this.state.values.slice();\n\n    if (this.state.isSelDown) {\n      values[this.state.indexSelDown] = this.state.moveCurrentValue;\n    }\n\n    return values;\n  };\n\n  ReactDualRangeSlider.prototype.getDisplayValues = function getDisplayValues() {\n    var values = this.formatOutput().sort(this.sortValues);\n    values = this.state.reverse ? values.reverse() : values;\n    return values;\n  };\n  /**\n   * getLeftPositions\n   * return left position as a proportion\n   */\n\n\n  ReactDualRangeSlider.prototype.getLeftPositions = function getLeftPositions() {\n    var values = this.getValues();\n    var limits = this.getLimits();\n    var size = this.state.size;\n    var left = [values[0] - limits[0], values[1] - limits[0]];\n    var leftPos = [left[0] / size * 100, left[1] / size * 100];\n\n    if (this.state.reverse) {\n      return [100 - leftPos[0], 100 - leftPos[1]];\n    }\n\n    return leftPos;\n  };\n  /**\n   * sortValues\n   * ascending sort method for arrays\n   */\n\n\n  ReactDualRangeSlider.prototype.sortValues = function sortValues(a, b) {\n    return a - b;\n  };\n  /**\n   * onChange\n   * trigger the onChange method output\n   */\n\n\n  ReactDualRangeSlider.prototype.onChange = function onChange() {\n    this.state.onChange(this.formatOutput().sort(this.sortValues));\n  };\n  /**\n   * render\n   * component rendering method \n   */\n\n\n  ReactDualRangeSlider.prototype.render = function render() {\n    var displayValues = this.getDisplayValues();\n    var displayLimits = this.getDisplayLimits();\n    var leftPos = this.getLeftPositions();\n    var crossLinePos = leftPos.slice();\n    crossLinePos.sort(this.sortValues);\n    crossLinePos[1] = 100 - crossLinePos[1];\n    var styleCrossline = {\n      left: crossLinePos[0] + '%',\n      right: crossLinePos[1] + '%',\n      backgroundColor: this.props.rangeColor\n    };\n    var styleSelector0 = {\n      left: leftPos[0] + '%',\n      display: this.props.lock[0] === false ? 'block' : 'none'\n    };\n    var styleSelector1 = {\n      left: leftPos[1] + '%',\n      display: this.props.lock[1] === false ? 'block' : 'none'\n    };\n    var styleValueRange = {\n      backgroundColor: this.props.rangeColor\n    };\n    return _react2.default.createElement(\"div\", {\n      className: _reactDualRangeSlider2.default.component,\n      onMouseMove: this.onMouseMove.bind(this),\n      onMouseLeave: this.onMouseLeave.bind(this),\n      onMouseUp: this.onMouseUp.bind(this),\n      onTouchMove: this.onTouchMove.bind(this),\n      onTouchEnd: this.onTouchEnd.bind(this),\n      \"data-name\": \"component\"\n    }, _react2.default.createElement(\"div\", {\n      className: _reactDualRangeSlider2.default.sliders\n    }, _react2.default.createElement(\"div\", {\n      className: _reactDualRangeSlider2.default.line\n    }, _react2.default.createElement(\"div\", {\n      className: _reactDualRangeSlider2.default.crossLine,\n      style: styleCrossline\n    })), _react2.default.createElement(\"div\", {\n      className: [_reactDualRangeSlider2.default.selector, _reactDualRangeSlider2.default.selector0].join(' '),\n      style: styleSelector0,\n      onMouseDown: this.onMouseDown0.bind(this),\n      onTouchStart: this.onTouchStart0.bind(this)\n    }, _ref), _react2.default.createElement(\"div\", {\n      className: [_reactDualRangeSlider2.default.selector, _reactDualRangeSlider2.default.selector1].join(' '),\n      style: styleSelector1,\n      onMouseDown: this.onMouseDown1.bind(this),\n      onTouchStart: this.onTouchStart1.bind(this)\n    }, _ref2)), _react2.default.createElement(\"div\", {\n      className: _reactDualRangeSlider2.default.values\n    }, _react2.default.createElement(\"div\", {\n      className: _reactDualRangeSlider2.default.limit\n    }, displayLimits[0]), _react2.default.createElement(\"div\", {\n      className: _reactDualRangeSlider2.default.value\n    }, displayValues[0]), _react2.default.createElement(\"div\", {\n      className: _reactDualRangeSlider2.default.valueRange,\n      style: styleValueRange\n    }), _react2.default.createElement(\"div\", {\n      className: _reactDualRangeSlider2.default.value\n    }, displayValues[1]), _react2.default.createElement(\"div\", {\n      className: _reactDualRangeSlider2.default.limit\n    }, displayLimits[1])));\n  };\n\n  return ReactDualRangeSlider;\n}(_react2.default.Component);\n\nexports.default = ReactDualRangeSlider;\nReactDualRangeSlider.displayName = \"ReactDualRangeSlider\";\nReactDualRangeSlider.propTypes = {\n  limits: _react.PropTypes.arrayOf(_react.PropTypes.number),\n  values: _react.PropTypes.arrayOf(_react.PropTypes.number),\n  lock: _react.PropTypes.arrayOf(_react.PropTypes.bool),\n  reverse: _react.PropTypes.bool,\n  formatFunc: _react.PropTypes.func,\n  onChange: _react.PropTypes.func,\n  rangeColor: _react.PropTypes.string\n};\nReactDualRangeSlider.defaultProps = {\n  limits: [0, 100],\n  values: [0, 100],\n  lock: [false, false],\n  reverse: false,\n  formatFunc: function formatFunc(value) {\n    return value;\n  },\n  onChange: function onChange() {},\n  rangeColor: '#f60'\n};","map":null,"metadata":{},"sourceType":"script"}